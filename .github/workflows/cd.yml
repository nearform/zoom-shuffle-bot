name: cd

on:
  push:
    branches: [master,chore/gcp-deploy]

jobs:
  provision:
    name: 'Provision and deploy'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: write

    steps:
      - name: 'Set environment variables'
        run: >-
          echo "
          SQL_INSTANCE_NAME='production-postgres-instance'
          SQL_DATABASE_NAME='zoom-shuffle-bot'
          GCP_REGION='europe-west1'
          RUN_SERVICE_NAME='zoom-shuffle-bot'
          " >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - id: 'auth'
        name: 'Authenticate with GCP'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v0

      - name: 'Check if Cloud SQL Instance exists'
        run: >-
          gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }} 
          --format="value(name)" 
          >/dev/null 2>/dev/null # ignore the output
          || echo "PROVISION_SQL_INSTANCE=true" >> $GITHUB_ENV # set env var only when the command fails

      - name: 'Provision Cloud SQL Instance'
        if: env.PROVISION_SQL_INSTANCE == 'true'
        run: >-
          gcloud sql instances create ${{ env.SQL_INSTANCE_NAME }}
          --database-version=POSTGRES_14 
          --cpu=2 
          --memory=4GB 
          --region=${{ env.GCP_REGION }}
          --root-password=${{ secrets.SQL_ROOT_PASSWORD }}

      - name: 'Check if Cloud SQL Database exists'
        run: >-
          gcloud sql databases describe ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ env.SQL_INSTANCE_NAME }} 
          --format="value(name)"  
          >/dev/null 2>/dev/null # ignore the output
          || echo "PROVISION_SQL_DATABASE=true" >> $GITHUB_ENV # set env var only when the command fails

      - name: 'Provision Cloud SQL Database'
        if: env.PROVISION_SQL_DATABASE == 'true'
        run: >-
          gcloud sql databases create ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ env.SQL_INSTANCE_NAME }}

#      - name: 'Deploy to Cloud Run'
#        uses: 'google-github-actions/deploy-cloudrun@v0'
#        with:
#          service: ${{ env.RUN_SERVICE_NAME }}
