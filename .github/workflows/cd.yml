name: cd

on:
  push:
    branches: [master]

jobs:
  provision:
    name: 'Provision and deploy'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: write

    steps:
      - name: 'Set environment variables'
        run: |
          echo "GCP_PROJECT_ID=shuffle-zoom-bot" >> $GITHUB_ENV
          echo "GCP_REGION=europe-west1" >> $GITHUB_ENV
          echo "SQL_INSTANCE_NAME=production-postgres" >> $GITHUB_ENV
          echo "SQL_INSTANCE_CPU=2" >> $GITHUB_ENV
          echo "SQL_INSTANCE_MEM=4GB" >> $GITHUB_ENV
          echo "SQL_DATABASE_NAME=zoom-shuffle-bot" >> $GITHUB_ENV
          echo "SQL_ROOT_USERNAME=postgres" >> $GITHUB_ENV
          echo "RUN_SERVICE_NAME=zoom-shuffle-bot" >> $GITHUB_ENV
          echo "RUN_CPU=1" >> $GITHUB_ENV
          echo "RUN_MEM=2G" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: 'Authenticate with GCP'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v0

      - name: 'Check if Cloud SQL Instance exists'
        run: >-
          gcloud sql instances describe ${{ env.SQL_INSTANCE_NAME }} 
          --format="value(name)" 
          >/dev/null 2>/dev/null
          || echo "PROVISION_SQL_INSTANCE=true" >> $GITHUB_ENV

      - name: 'Provision Cloud SQL Instance'
        if: env.PROVISION_SQL_INSTANCE == 'true'
        run: >-
          gcloud sql instances create ${{ env.SQL_INSTANCE_NAME }}
          --database-version=POSTGRES_14 
          --cpu=${{ env.SQL_INSTANCE_CPU }}
          --memory=${{ env.SQL_INSTANCE_MEM }}
          --region=${{ env.GCP_REGION }}
          --root-password=${{ secrets.SQL_ROOT_PASSWORD }}

      - name: 'Check if Cloud SQL Database exists'
        run: >-
          gcloud sql databases describe ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ env.SQL_INSTANCE_NAME }} 
          --format="value(name)"  
          >/dev/null 2>/dev/null
          || echo "PROVISION_SQL_DATABASE=true" >> $GITHUB_ENV

      - name: 'Provision Cloud SQL Database'
        if: env.PROVISION_SQL_DATABASE == 'true'
        run: >-
          gcloud sql databases create ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ env.SQL_INSTANCE_NAME }}

      - name: 'Authorize Docker push'
        run: gcloud auth configure-docker

      - name: 'Retrieve the Cloud SQL connection name'
        run: echo "SQL_HOST=/cloudsql/$(gcloud sql instances describe --format="value(connectionName)" ${{ env.SQL_INSTANCE_NAME }})" >> $GITHUB_ENV

      - name: 'Deploy to Cloud Run'
        id: deploy
        run: >-
          gcloud run deploy ${{ env.RUN_SERVICE_NAME }}
          --region=${{ env.GCP_REGION }}
          --cpu=${{ env.RUN_CPU }}
          --memory=${{ env.RUN_MEM }}
          --set-cloudsql-instances=${{ env.SQL_INSTANCE_NAME }}
          --revision-suffix=${{ github.sha }}
          --source=.
          --set-env-vars='
          NODE_ENV=production,
          DB_USER=${{ env.SQL_ROOT_USERNAME }},
          DB_PASSWORD=${{ secrets.SQL_ROOT_PASSWORD }},
          DB_HOST=${{ env.SQL_HOST }},
          DB_NAME=${{ env.SQL_DATABASE_NAME }},
          CLIENT_ID=${{ secrets.ZOOM_CLIENT_ID }},
          CLIENT_SECRET=${{ secrets.ZOOM_CLIENT_SECRET }},
          BOT_JID=${{ secrets.ZOOM_BOT_JID }},
          REDIRECT_URL=${{ secrets.ZOOM_REDIRECT_URL }},
          VERIFICATION_TOKEN=${{ secrets.ZOOM_VERIFICATION_TOKEN }}'

      - name: 'Retrieve the Cloud Run service url'
        run: echo "RUN_URL=$(gcloud run services describe ${{ env.RUN_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format="value(status.url)")" >> $GITHUB_ENV

      - name: 'Make the service public'
        run: >-
          gcloud run services add-iam-policy-binding ${{ env.RUN_SERVICE_NAME }}
          --member="allUsers"
          --role="roles/run.invoker"
          --region=${{ env.GCP_REGION }}

      - name: 'Show summary'
        run: >-
          echo "App successfully deployed to: ${{ env.RUN_URL }}.
          Make sure that all settings in Zoom bot's configuration point at this url."
