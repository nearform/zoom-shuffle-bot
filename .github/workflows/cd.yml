name: cd

on:
  release:
    types:
      - published

  workflow_dispatch:
    inputs:
      run_service_name:
        description: 'Cloud Run service name'
        required: true
        default: 'shuffle-bot-test'
      sql_database_name:
        description: 'Cloud SQL database name'
        required: true
        default: 'shuffle-bot-test'

jobs:
  provision:
    name: 'Provision and deploy'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: write

    env:
      GCP_REGION: europe-west1
      SQL_DATABASE_NAME: ${{ github.event.inputs.sql_database_name || vars.SQL_DB_NAME }}
      RUN_SERVICE_NAME: ${{ github.event.inputs.run_service_name || vars.GCP_RUN_SERVICE_NAME }}
    steps:
      - uses: actions/checkout@v3

      - name: 'Authenticate with GCP'
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: 'Check if Cloud SQL Instance exists'
        run: >-
          gcloud sql instances describe ${{ vars.SQL_DB_INSTANCE_NAME }} 
          --format="value(name)" 
          >/dev/null 2>/dev/null
          || echo "PROVISION_SQL_INSTANCE=true" >> $GITHUB_ENV

      - name: 'Provision Cloud SQL Instance'
        if: env.PROVISION_SQL_INSTANCE == 'true'
        run: >-
          gcloud sql instances create ${{ vars.SQL_DB_INSTANCE_NAME }}
          --database-version=POSTGRES_14 
          --tier=db-f1-micro
          --region=${{ env.GCP_REGION }}
          --root-password=${{ secrets.SQL_ROOT_PASSWORD }}

      - name: 'Check if Cloud SQL Database exists'
        run: >-
          gcloud sql databases describe ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ vars.SQL_DB_INSTANCE_NAME }} 
          --format="value(name)"  
          >/dev/null 2>/dev/null
          || echo "PROVISION_SQL_DATABASE=true" >> $GITHUB_ENV

      - name: 'Provision Cloud SQL Database'
        if: env.PROVISION_SQL_DATABASE == 'true'
        run: >-
          gcloud sql databases create ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ vars.SQL_DB_INSTANCE_NAME }}

      - name: 'Authorize Docker push'
        run: gcloud auth configure-docker

      - name: 'Retrieve the Cloud SQL connection name'
        run: echo "SQL_HOST=/cloudsql/$(gcloud sql instances describe --format="value(connectionName)" ${{ vars.SQL_DB_INSTANCE_NAME }})" >> $GITHUB_ENV

      - name: Update secrets in GCP Secret Manager
        uses: nearform-actions/github-action-gcp-secrets@v1
        with:
          secrets: |-
            shuffle-db-password:"${{ secrets.SQL_ROOT_PASSWORD }}"
            shuffle-client-secret:"${{ secrets.ZOOM_CLIENT_SECRET }}"
            shuffle-bot-jid:"${{ secrets.ZOOM_BOT_JID }}"
            shuffle-secret-token:"${{ secrets.ZOOM_SECRET_TOKEN }}"

      - name: 'Deploy to Cloud Run'
        id: deploy
        run: >-
          gcloud run deploy ${{ env.RUN_SERVICE_NAME }}
          --region=${{ env.GCP_REGION }}
          --cpu=${{ vars.RUN_CPU }}
          --memory=${{ vars.RUN_MEM }}
          --set-cloudsql-instances=${{ vars.SQL_DB_INSTANCE_NAME }}
          --revision-suffix=${{ github.sha }}
          --source=.
          --set-env-vars='NODE_ENV=production'
          --set-env-vars='CLIENT_ID=${{ vars.ZOOM_CLIENT_ID }}'
          --set-env-vars='DB_HOST=${{ vars.SQL_DB_HOST }}'
          --set-env-vars='DB_USER=${{ vars.SQL_ROOT_USER }}'
          --set-env-vars='DB_NAME=${{ env.SQL_DATABASE_NAME }}'
          --set-env-vars='REDIRECT_URL=${{ vars.REDIRECT_URL }}'
          --set-secrets='
            DB_PASSWORD=shuffle-db-password:latest,
            CLIENT_SECRET=shuffle-client-secret:latest,
            BOT_JID=shuffle-bot-jid:latest,
            SECRET_TOKEN=shuffle-secret-token:latest'

      - name: 'Retrieve the Cloud Run service url'
        run: echo "RUN_URL=$(gcloud run services describe ${{ env.RUN_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format="value(status.url)")" >> $GITHUB_ENV

      - name: 'Make the service public'
        run: >-
          gcloud run services add-iam-policy-binding ${{ env.RUN_SERVICE_NAME }}
          --member="allUsers"
          --role="roles/run.invoker"
          --region=${{ env.GCP_REGION }}

      - name: 'Show summary'
        run: >-
          echo "App successfully deployed to: ${{ env.RUN_URL }}.
          Make sure that all settings in Zoom bot's configuration point at this url."
