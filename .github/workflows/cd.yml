name: cd

on:
  release:
    types:
      - published

  workflow_dispatch:
    inputs:
      run_service_name:
        description: 'Cloud Run service name'
        required: true
        default: 'shuffle-bot-test'
      sql_database_name:
        description: 'Cloud SQL database name'
        required: true
        default: 'shuffle-bot-test'

jobs:
  provision:
    name: 'Provision and deploy'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: write

    env:
      GCP_PROJECT_ID: shuffle-zoom-bot
      GCP_REGION: europe-west1
      SQL_DATABASE_NAME: ${{ github.event.inputs.sql_database_name || secrets.SQL_DATABASE_NAME }}
      RUN_SERVICE_NAME: ${{ github.event.inputs.run_service_name || secrets.RUN_SERVICE_NAME }}
    steps:
      - uses: actions/checkout@v3

      - name: 'Authenticate with GCP'
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v1

      - name: 'Check if Cloud SQL Instance exists'
        run: >-
          gcloud sql instances describe ${{ secrets.SQL_INSTANCE_NAME }} 
          --format="value(name)" 
          >/dev/null 2>/dev/null
          || echo "PROVISION_SQL_INSTANCE=true" >> $GITHUB_ENV

      - name: 'Provision Cloud SQL Instance'
        if: env.PROVISION_SQL_INSTANCE == 'true'
        run: >-
          gcloud sql instances create ${{ secrets.SQL_INSTANCE_NAME }}
          --database-version=POSTGRES_14 
          --cpu=${{ secrets.SQL_INSTANCE_CPU }}
          --memory=${{ secrets.SQL_INSTANCE_MEM }}
          --region=${{ env.GCP_REGION }}
          --root-password=${{ secrets.SQL_ROOT_PASSWORD }}

      - name: 'Check if Cloud SQL Database exists'
        run: >-
          gcloud sql databases describe ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ secrets.SQL_INSTANCE_NAME }} 
          --format="value(name)"  
          >/dev/null 2>/dev/null
          || echo "PROVISION_SQL_DATABASE=true" >> $GITHUB_ENV

      - name: 'Provision Cloud SQL Database'
        if: env.PROVISION_SQL_DATABASE == 'true'
        run: >-
          gcloud sql databases create ${{ env.SQL_DATABASE_NAME }}
          --instance=${{ secrets.SQL_INSTANCE_NAME }}

      - name: 'Authorize Docker push'
        run: gcloud auth configure-docker

      - name: 'Retrieve the Cloud SQL connection name'
        run: echo "SQL_HOST=/cloudsql/$(gcloud sql instances describe --format="value(connectionName)" ${{ secrets.SQL_INSTANCE_NAME }})" >> $GITHUB_ENV

      - name: Update the secrets
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

          for secret in shuffle-db-host shuffle-db-username shuffle-db-password shuffle-db-name shuffle-client-id shuffle-client-secret shuffle-bot-jid shuffle-redirect-url shuffle-verification-token
          do
            # delete the secret
            gcloud secrets delete --quiet $secret || true

            # re-create the secret
            gcloud secrets create --locations=${{ secrets.GCP_REGION }} --replication-policy=user-managed $secret
          done

          # update the secrets
          echo "${{ env.SQL_HOST }}" | gcloud secrets versions add shuffle-db-host --data-file=-
          echo "${{ secrets.SQL_ROOT_USERNAME }}" | gcloud secrets versions add shuffle-db-username --data-file=-
          echo "${{ secrets.SQL_ROOT_PASSWORD }}" | gcloud secrets versions add shuffle-db-password --data-file=-
          echo "${{ secrets.SQL_DATABASE_NAME }}" | gcloud secrets versions add shuffle-db-name --data-file=-
          echo "${{ secrets.ZOOM_CLIENT_ID }}" | gcloud secrets versions add shuffle-client-id --data-file=-
          echo "${{ secrets.ZOOM_CLIENT_SECRET }}" | gcloud secrets versions add shuffle-client-secret --data-file=-
          echo "${{ secrets.ZOOM_BOT_JID }}" | gcloud secrets versions add shuffle-bot-jid --data-file=-
          echo "${{ secrets.ZOOM_REDIRECT_URL }}" | gcloud secrets versions add shuffle-redirect-url --data-file=-
          echo "${{ secrets.ZOOM_VERIFICATION_TOKEN }}" | gcloud secrets versions add shuffle-verification-token --data-file=-

      - name: 'Deploy to Cloud Run'
        id: deploy
        run: >-
          gcloud run deploy ${{ secrets.RUN_SERVICE_NAME }}
          --region=${{ env.GCP_REGION }}
          --cpu=${{ secrets.RUN_CPU }}
          --memory=${{ secrets.RUN_MEM }}
          --set-cloudsql-instances=${{ secrets.SQL_INSTANCE_NAME }}
          --revision-suffix=${{ github.sha }}
          --source=.
          --set-env-vars='NODE_ENV=production'
          --set-secrets='
            DB_USER=shuffle-db-username:latest,
            DB_PASSWORD=shuffle-db-password:latest,
            DB_HOST=shuffle-db-host:latest,
            DB_NAME=shuffle-db-username:latest,
            CLIENT_ID=shuffle-client-id:latest,
            CLIENT_SECRET=shuffle-client-secret:latest,
            BOT_JID=shuffle-bot-jid:latest,
            REDIRECT_URL=shuffle-redirect-url:latest,
            VERIFICATION_TOKEN=shuffle-verification-token:latest'

      - name: 'Retrieve the Cloud Run service url'
        run: echo "RUN_URL=$(gcloud run services describe ${{ secrets.RUN_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format="value(status.url)")" >> $GITHUB_ENV

      - name: 'Make the service public'
        run: >-
          gcloud run services add-iam-policy-binding ${{ secrets.RUN_SERVICE_NAME }}
          --member="allUsers"
          --role="roles/run.invoker"
          --region=${{ env.GCP_REGION }}

      - name: 'Show summary'
        run: >-
          echo "App successfully deployed to: ${{ env.RUN_URL }}.
          Make sure that all settings in Zoom bot's configuration point at this url."
